name: Nx Cloud Agents

on:
  workflow_call:
    secrets:
      ENV_FILE:
        required: false
    inputs:
      number-of-agents:
        required: true
        type: number
      environment:
        type: string
        description: environment to deploy to
        required: true
      env_file:
        type: string
        description: env file name where your secrets are going to be stored
        required: false
        default: .env
      node-version:
        required: false
        type: string
      yarn-version:
        required: false
        type: string
      npm-version:
        required: false
        type: string
      pnpm-version:
        required: false
        type: string
      install-command:
        required: false
        type: string
      init-commands:
        required: false
        type: string
      runs-on:
        required: false
        type: string
        default: ubuntu-latest

env:
  NX_CLOUD_DISTRIBUTED_EXECUTION: true
  ENV_FILE: ${{ secrets.ENV_FILE }}

jobs:
  set-agents:
    runs-on: ${{ inputs.runs-on }}
    name: Init
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        # Turn the number-of-agents input into a JSON structure which is compatible with a Github job matrix strategy
        run: |
          AGENTS_JSON_ARRAY=$(node -e "console.log(JSON.stringify(Array.from(new Array(${{ inputs.number-of-agents }})).map((_, i) => i + 1)));")
          echo $AGENTS_JSON_ARRAY
          echo "::set-output name=matrix::$AGENTS_JSON_ARRAY"

  # Intentionally using capital letter in order to make the Github UI for the matrix look better
  Run:
    needs: set-agents
    runs-on: ${{ inputs.runs-on }}
    environment: ${{ inputs.environment }}
    name: Agent ${{ matrix.agent }}
    timeout-minutes: 30 # Set the maximum time limit for the job to 30 minutes
    strategy:
      fail-fast: true # Stop the matrix run as soon as one job fails
      matrix:
        agent:
          - ${{ fromJson(needs.set-agents.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v3

      - name: create env file ${{ inputs.env_file }} from ENV_FILE secrets if it exists
        if: env.ENV_FILE
        run: |
          echo $ENV_FILE | base64 -d > ${{ inputs.env_file }}

      - name: Detect package manager
        id: package_manager
        run: |
          echo "::set-output name=name::$([[ -f ./yarn.lock ]] && echo "yarn" || ([[ -f ./pnpm-lock.yaml ]] && echo "pnpm") || "npm")"

      # Set node/npm/yarn versions using volta, with optional overrides provided by the consumer
      - uses: volta-cli/action@v4
        with:
          node-version: "${{ inputs.node-version }}"
          npm-version: "${{ inputs.npm-version }}"
          yarn-version: "${{ inputs.yarn-version }}"

      # Install pnpm with exact version provided by consumer or fallback to latest
      - name: Install PNPM
        if: steps.package_manager.outputs.name == 'pnpm'
        uses: pnpm/action-setup@v2.2.2
        with:
          version: ${{ inputs.pnpm-version || 'latest' }}

      - name: Print node/npm/yarn versions
        id: versions
        run: |
          node_ver=$( node --version )
          yarn_ver=$( yarn --version || true )
          pnpm_ver=$( pnpm --version || true )

          echo "Node: ${node_ver:1}"
          echo "NPM: $( npm --version )"
          if [[ $yarn_ver != '' ]]; then echo "Yarn: $yarn_ver"; fi
          if [[ $pnpm_ver != '' ]]; then echo "PNPM: $pnpm_ver"; fi

          echo "::set-output name=node_version::${node_ver:1}"

      - name: Use the node_modules cache if available [npm]
        if: steps.package_manager.outputs.name == 'npm'
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-
      
      - name: Get pnpm store directory
        id: pnpm-cache
        if: steps.package_manager.outputs.name == 'pnpm'
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Use the node_modules cache if available [pnpm]
        if: steps.package_manager.outputs.name == 'pnpm'
        id: cache-node-modules-pnpm
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Get yarn cache directory path
        if: steps.package_manager.outputs.name == 'yarn'
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Use the node_modules cache if available [yarn]
        if: steps.package_manager.outputs.name == 'yarn'
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-yarn-

      - name: Install dependencies
        if: ${{ inputs.install-commands == '' }}
        run: |
          if [ "${{ steps.package_manager.outputs.name == 'yarn' }}" == "true" ]; then
            if [ "${{ startsWith(steps.versions.outputs.yarn_version, '1.') }}" == "true" ]; then
              echo "Running yarn install --frozen-lockfile"
              yarn install --frozen-lockfile
            fi
          elif [ "${{ steps.package_manager.outputs.name == 'pnpm' }}" == "true" ]; then
            echo "Running pnpm install"
            pnpm install
          else
            echo "Running npm ci"
            npm ci
          fi
      - name: Run any configured init-commands sequentially
        if: ${{ inputs.init-commands != '' }}
        shell: bash
        run: |
          ${{ inputs.init-commands }}

      - name: Start Nx Agent ${{ matrix.agent }}
        run: npx nx-cloud start-agent